{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"PI Monitoring Documentation","text":""},{"location":"#about-the-project","title":"About The Project","text":"<p>PI Monitoring is a set of Python scripts used to monitor web sites and report incidents and operational status to statuspage.io</p>"},{"location":"#built-with","title":"Built With","text":"<ul> <li>Python</li> </ul>"},{"location":"CHANGELOG/","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p> <p>The format is based on Keep a Changelog, and this project adheres to Semantic Versioning.</p>"},{"location":"CHANGELOG/#v100","title":"[v1.0.0]","text":""},{"location":"CHANGELOG/#changed","title":"Changed","text":"<ul> <li>Migrating to a Python module for easier use.</li> </ul>"},{"location":"contributing/","title":"Contribution Guidelines","text":""},{"location":"contributing/#environment-configuration","title":"Environment Configuration","text":"<p>It is recommended that you use a virtual environment for development.</p>"},{"location":"contributing/#venv","title":"VENV","text":"<p>Create a new python virtualenv and activate it:</p> <pre><code>python3 -m venv venv\nsource venv/bin/activate\n</code></pre>"},{"location":"contributing/#anaconda","title":"Anaconda","text":"<p>Installation Guide</p> <pre><code>  conda create --name pi_monitor python=3.7 --yes\n  conda activate pi_monitor\n</code></pre>"},{"location":"contributing/#requirements","title":"Requirements","text":"<p>Install the requirements for the application:</p> <pre><code>pip install -r requirements.txt\npip install -r requirements-dev.txt\n</code></pre>"},{"location":"contributing/#install-the-module","title":"Install the Module","text":"<p>Install the module in an editable mode:</p> <pre><code>pip install -e .\n</code></pre> <p>Run <code>pi-monitor -h</code> and verify that the help is displayed.</p>"},{"location":"contributing/#contributing","title":"Contributing","text":"<p>Contributions are what make the open source community such an amazing place to be learn, inspire, and create. Any contributions you make are greatly appreciated.</p> <ol> <li>Fork the Project</li> <li>Create your Feature Branch (<code>git checkout -b feature/AmazingFeature</code>)</li> <li>Commit your Changes (<code>git commit -m 'Add some AmazingFeature'</code>)</li> <li>Push to the Branch (<code>git push origin feature/AmazingFeature</code>)</li> <li>Open a Pull Request</li> </ol>"},{"location":"contributing/#formatting-and-linting","title":"Formatting and Linting","text":"<p>This repository is configured to use pre-commit to check code, including Black and Flake8 to format and lint code.  It is always good to format before commiting changes.</p> <p>To format:</p> <pre><code>&gt; black .\n</code></pre> <p>To execute flake8 across your changes</p> <pre><code>&gt; flake8 .\n</code></pre> <p>To check your files before committing:</p> <pre><code>&gt; pre-commit run\n</code></pre>"},{"location":"contributing/#documentation","title":"Documentation","text":"<p>This repository uses mkdocs to generate the documentation site, along with mkdocsstrings-python to extract documentation from code comments.  This project uses Google-formatted docstrings to generate, so please follow that standard when documenting code.</p> <p>Your contribution should be documented.  You can generate documentation locally using the following commands.</p> <pre><code>&gt; pip install -r requirements-mkdocs.txt\n&gt; mkdocs serve\n</code></pre> <p>The documentation site is updated when new releases are published in Github.</p>"},{"location":"getting-started/","title":"Getting Started","text":""},{"location":"getting-started/#requirements","title":"Requirements","text":"<ul> <li>Python 3.7+</li> <li>PIP</li> </ul>"},{"location":"getting-started/#installation","title":"Installation","text":"<p>You can install this tool using <code>pip</code>:</p> <pre><code># If Python3 is your default\npip install spydersoft-pi-monitor\n\n# On Raspberry Pi, or where you have both Python 2 and 3 installed\npip3 install spydersoft-pi-monitor\n</code></pre>"},{"location":"getting-started/#usage","title":"Usage","text":""},{"location":"getting-started/#basic","title":"Basic","text":"<p>The minimal execution is to run <code>pi-monitor</code> in a directory where there is a file called <code>monitor.config.json</code> formatted as described in the Configuration section.</p> <p>To specify a configuration file, use the <code>-c</code> or <code>--configfile</code> command line flag.</p> <pre><code>pi-monitor --configfile my.config.json\n</code></pre>"},{"location":"getting-started/#configuration","title":"Configuration","text":"<ol> <li>Create a file called <code>monitor.config.json</code>.</li> <li>Edit <code>monitor.config.json</code>.</li> </ol> <pre><code>{\n    \"status_checks\": [\n        {\n            \"name\": \"Site (Prod)\",\n            \"url\": \"https://your.domain.com\",\n            \"statusPageComponentId\": \"123215125\"\n        }\n    ],\n    \"notification\": {\n        \"smtp_url\": \"smtp.gmail.com\",\n        \"smtp_port\": 587,\n        \"smtp_sender_id\": \"gmail_email\",\n        \"smtp_sender_apikey\": \"gmail_pass\",\n        \"sms_email\": \"email@vtext.com\"\n    },\n    \"status_page\": {\n        \"api_key\": \"status_page_api_key\",\n        \"page_id\": \"status_page_page_id\"\n    }\n}\n</code></pre>"},{"location":"api/configuration-reference/","title":"Configuration","text":"<p>Module for reading configuration.</p> <p>This module provides a function for reading a JSON file into  the provided Settings objects.</p>"},{"location":"api/configuration-reference/#pi_monitor.configuration.Generic","title":"<code>Generic</code>","text":"<p>Generic method for reading dictionary values.</p> Source code in <code>pi_monitor/configuration.py</code> <pre><code>class Generic:\n    \"\"\"Generic method for reading dictionary values.\"\"\"\n\n    @classmethod\n    def from_dict(cls, dict):\n        obj = cls()\n        obj.__dict__.update(dict)\n        return obj\n</code></pre>"},{"location":"api/configuration-reference/#pi_monitor.configuration.HealthCheckSettings","title":"<code>HealthCheckSettings</code>","text":"<p>Settings for a HealthCheck.</p> <p>A Healthcheck represents a simple request to the defined <code>url</code>.  If a non-200 the request generates an exception or a non-200  response, the site is determined to be down.</p> <p>If <code>status_page</code> is defined, statuspage.io will be updated  according to the following rules.</p> <ul> <li>If the site returns a 2xx response and statuspage.io lists  the component as non-operational:<ul> <li>The component's status will be set to operational</li> <li>Any open incidents associated with this component will  be marked as resolved</li> </ul> </li> <li>If the site returns a non-2xx response or an exception and  statuspage.io lists the component as operational:<ul> <li>The component's status will be set to operational</li> <li>An incident will be opened using the <code>name</code> and  associated with this component.</li> </ul> </li> </ul> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>The name of the site being checked</p> <code>url</code> <code>str</code> <p>The url to be fetched as part of the check</p> <code>status_page</code> <code>StatusPageComponentSettings</code> <p>Any StatusPage-related component settings</p> Source code in <code>pi_monitor/configuration.py</code> <pre><code>class HealthCheckSettings:\n    \"\"\"Settings for a HealthCheck.\n\n    A Healthcheck represents a simple request to the defined `url`.\n     If a non-200 the request generates an exception or a non-200\n     response, the site is determined to be down.\n\n    If `status_page` is defined, statuspage.io will be updated\n     according to the following rules.\n\n    - If the site returns a 2xx response and statuspage.io lists\n     the component as non-operational:\n        - The component's status will be set to operational\n        - Any open incidents associated with this component will\n         be marked as resolved\n    - If the site returns a non-2xx response or an exception and\n     statuspage.io lists the component as operational:\n        - The component's status will be set to operational\n        - An incident will be opened using the `name` and\n         associated with this component.\n\n\n    Attributes:\n        name (str): The name of the site being checked\n        url (str): The url to be fetched as part of the check\n        status_page (StatusPageComponentSettings): Any StatusPage-related\n            component settings\n    \"\"\"\n\n    name: str\n    url: str\n    status_page: StatusPageComponentSettings\n</code></pre>"},{"location":"api/configuration-reference/#pi_monitor.configuration.MonitorSettings","title":"<code>MonitorSettings</code>","text":"<p>MonitorSettings</p> <p>This class represents the entire structure of the configuration file (<code>monitor.config.json</code> by default).</p> <p>Attributes:</p> Name Type Description <code>status_checks</code> <code>List[HealthCheckSettings]</code> <p>The collection of statusCheck settings</p> <code>notification</code> <code>NotificationSettings</code> <p>The settings object for notifications</p> <code>status_page</code> <code>StatusPageSettings</code> <p>The settings object for StatusPage.io</p> Source code in <code>pi_monitor/configuration.py</code> <pre><code>class MonitorSettings:\n    \"\"\"MonitorSettings\n\n    This class represents the entire structure of the configuration\n    file (`monitor.config.json` by default).\n\n    Attributes:\n        status_checks: The collection of statusCheck settings\n        notification: The settings object for notifications\n        status_page: The settings object for StatusPage.io\n    \"\"\"\n\n    status_checks: List[HealthCheckSettings]\n    notification: NotificationSettings\n    status_page: StatusPageSettings\n</code></pre>"},{"location":"api/configuration-reference/#pi_monitor.configuration.NotificationSettings","title":"<code>NotificationSettings</code>","text":"<p>Notification Settings</p> <p>This class represents settings for notifications.  If you are using Gmail to send, you need to set your account's <code>Allow Less Secure Apps</code> setting to <code>true</code></p> <p>Attributes:</p> Name Type Description <code>smtp_url</code> <code>str</code> <p>The URL of the SMTP host</p> <code>smtp_port</code> <code>int</code> <p>The SMTP Port to use</p> <code>smtp_sender_id</code> <code>str</code> <p>The SMTP user</p> <code>smtp_sender_apikey</code> <code>str</code> <p>The SMTP user's password</p> <code>sms_email</code> <code>str</code> <p>The email to receive notifications</p> Source code in <code>pi_monitor/configuration.py</code> <pre><code>class NotificationSettings:\n    \"\"\"Notification Settings\n\n    This class represents settings for notifications.  If you are using Gmail to send,\n    you need to set your account's `Allow Less Secure Apps` setting to `true`\n\n    Attributes:\n        smtp_url (str): The URL of the SMTP host\n        smtp_port (int): The SMTP Port to use\n        smtp_sender_id (str): The SMTP user\n        smtp_sender_apikey (str): The SMTP user's password\n        sms_email: The email to receive notifications\n\n    \"\"\"\n\n    smtp_url: str\n    smtp_port: int\n    smtp_sender_id: str\n    smtp_sender_apikey: str\n    sms_email: str\n</code></pre>"},{"location":"api/configuration-reference/#pi_monitor.configuration.StatusPageComponentSettings","title":"<code>StatusPageComponentSettings</code>","text":"<p>Settings for StatusPage.io components.</p> <p>Attributes:</p> Name Type Description <code>component_id</code> <code>str</code> <p>The ID of the component in your statuspage.io page</p> Source code in <code>pi_monitor/configuration.py</code> <pre><code>class StatusPageComponentSettings:\n    \"\"\"Settings for StatusPage.io components.\n\n    Attributes:\n        component_id (str): The ID of the component in your statuspage.io page\n    \"\"\"\n\n    component_id: str\n</code></pre>"},{"location":"api/configuration-reference/#pi_monitor.configuration.StatusPageSettings","title":"<code>StatusPageSettings</code>","text":"<p>Settings for StatusPage.io.</p> <p>Attributes:</p> Name Type Description <code>api_key</code> <code>str</code> <p>The API Key to access statuspage.io</p> <code>page_id</code> <code>str</code> <p>Your PageId for statuspage.io</p> Source code in <code>pi_monitor/configuration.py</code> <pre><code>class StatusPageSettings:\n    \"\"\"Settings for StatusPage.io.\n\n    Attributes:\n        api_key (str): The API Key to access statuspage.io\n        page_id (str): Your PageId for statuspage.io\n    \"\"\"\n\n    api_key: str\n    page_id: str\n</code></pre>"},{"location":"api/configuration-reference/#pi_monitor.configuration.read_configuration","title":"<code>read_configuration(file, default_settings={})</code>","text":"<p>Read Configuration file and return settings</p> <p>Parameters:</p> Name Type Description Default <code>file</code> <code>str</code> <p>The file name to use for configuration.     The default value is <code>monitor.config.json</code></p> required <code>default_settings</code> <code>MonitorSettings</code> <p>A default instance of the settings to use if the file                 cannot be found.</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>MonitorSettings</code> <code>MonitorSettings</code> <p>A MonitorSettings object populated from the given file,             or an empty Settings object.</p> Source code in <code>pi_monitor/configuration.py</code> <pre><code>def read_configuration(\n    file: str, default_settings: MonitorSettings = {}\n) -&gt; MonitorSettings:\n    \"\"\"Read Configuration file and return settings\n\n    Args:\n        file: The file name to use for configuration.\n                The default value is `monitor.config.json`\n        default_settings: A default instance of the settings to use if the file\n                            cannot be found.\n\n    Returns:\n        MonitorSettings: A MonitorSettings object populated from the given file,\n                        or an empty Settings object.\n    \"\"\"\n    config_path = Path(file)\n\n    if not config_path.exists():\n        logger.error(\"Configuration file not found: %s.  Using default\", file)\n        return default_settings\n\n    config_data = config_path.read_text()\n    return json.loads(config_data, object_hook=Generic.from_dict)\n</code></pre>"},{"location":"api/enums/","title":"Enums","text":""},{"location":"api/enums/#pi_monitor.enums.OpLevel","title":"<code>OpLevel</code>","text":"<p>               Bases: <code>Enum</code></p> <p>OpLevel Enum</p> Source code in <code>pi_monitor/enums.py</code> <pre><code>class OpLevel(Enum):\n    \"\"\"OpLevel Enum\"\"\"\n\n    Operational = 1\n    Degraded = 2\n    Partial_Outage = 3\n    Full_Outage = 4\n</code></pre>"},{"location":"api/healthchecks-reference/","title":"HealthChecks","text":""},{"location":"api/healthchecks-reference/#pi_monitor.healthchecks.HealthCheckExecutor","title":"<code>HealthCheckExecutor</code>","text":"<p>HealthCheckExecutor</p> <p>The HealthCheckExecutor encapsulates the functionality to perform a health check on a site and properly notify users or update statuspage.io accordingly.</p> <p>A Healthcheck represents a simple request to the defined <code>url</code>. If a non-200 the request generates an exception or a non-200 response, the site is determined to be down.</p> <p>If <code>statuspage_operator</code> is present and the HealthCheckSettings have a component_id set, statuspage.io will be updated according to the following rules.</p> <ul> <li>If the site returns a 2xx response and statuspage.io lists the component as     non-operational:<ul> <li>The component's status will be set to operational</li> <li>Any open incidents associated with this component will be marked as resolved</li> </ul> </li> <li>If the site returns a non-2xx response or an exception and statuspage.io lists     the component as operational:<ul> <li>The component's status will be set to operational</li> <li>An incident will be opened using the <code>name</code> and associated with   this component.</li> </ul> </li> </ul> <p>Attributes:</p> Name Type Description <code>statuspage_operator</code> <code>StatusPageOperator</code> <p>The name of the site being checked</p> <code>notifier</code> <code>Notifier</code> <p>The url to be fetched as part of the check</p> Source code in <code>pi_monitor/healthchecks.py</code> <pre><code>class HealthCheckExecutor:\n    \"\"\"HealthCheckExecutor\n\n    The HealthCheckExecutor encapsulates the functionality to perform a health check on\n    a site and properly notify users or update statuspage.io accordingly.\n\n    A Healthcheck represents a simple request to the defined `url`. If a non-200 the\n    request generates an exception or a non-200 response, the site is determined to\n    be down.\n\n    If `statuspage_operator` is present and the HealthCheckSettings have a component_id\n    set, statuspage.io will be updated according to the following rules.\n\n    - If the site returns a 2xx response and statuspage.io lists the component as\n        non-operational:\n        - The component's status will be set to operational\n        - Any open incidents associated with this component will be marked as resolved\n    - If the site returns a non-2xx response or an exception and statuspage.io lists\n        the component as operational:\n        - The component's status will be set to operational\n        - An incident will be opened using the `name` and associated with\n          this component.\n\n\n    Attributes:\n        statuspage_operator: The name of the site being checked\n        notifier: The url to be fetched as part of the check\n    \"\"\"\n\n    statuspage_operator: StatusPageOperator\n    notifier: Notifier\n\n    def __init__(\n        self,\n        status_operator: StatusPageOperator,\n        notifier: Notifier,\n    ):\n        \"\"\"Constructor\n\n        Constructs an instance of the HealthCheckExecutor with the given\n        [StatusPageOperator][pi_monitor.StatusPageOperator] and\n        [Notifier][pi_monitor.Notifier].\n\n        Attributes:\n            statuspage_operator: The name of the site being checked\n            notifier: The url to be fetched as part of the check\n        \"\"\"\n        self.statuspage_operator = status_operator\n        self.notifier = notifier\n\n    def execute_health_check(self, check_settings: HealthCheckSettings):\n        \"\"\"Execute a health check\n\n        Executes a health check using the provided HealthCheckSettings.\n\n        Args:\n            check_settings: An instance of\n                [HealthCheckSettings][pi_monitor.HealthCheckSettings]\n        \"\"\"\n        logger.info(\"Checking %s...\", check_settings.name)\n\n        send_notification = False\n\n        http_result = self._get_http(check_settings.url)\n\n        if http_result.success:\n            # Good Check\n            logger.info(\"Status OK\")\n            op_level = OpLevel.Operational\n        else:\n            # Bad check\n            op_level = OpLevel.Full_Outage\n            logger.warning(http_result.message)\n            send_notification = True\n\n        notification_text = http_result.message\n        if check_settings.status_page and check_settings.status_page.component_id != \"\":\n            status_result = self._update_status_page(check_settings, op_level)\n            send_notification = (\n                status_result.incident_result.incident_created\n                or status_result.incident_result.incident_resolved\n            )\n            notification_text = status_result.incident_result.incident.description\n\n        if (\n            send_notification\n            and notification_text is not None\n            and notification_text != \"\"\n        ):\n            logger.info(\"Sending notification: %s\", notification_text)\n            self.notifier.notify(check_settings.name, notification_text)\n\n    def _get_http(self, url: str) -&gt; HttpGetResult:\n        \"\"\"Retrieve data from the URL\n\n        Attempt to get data from the provided URL\n\n        Args:\n            url: The url to be retrieved\n\n        Returns:\n            An [HttpGetResult][pi_monitor.HttpGetResult]\n        \"\"\"\n        if not url or url == \"\":\n            result = HttpGetResult(False, \"no url defined\")\n            return result\n\n        try:\n            logger.debug(\"Requesting %s\", url)\n            r = requests.get(url)\n            result = self._process_response(r)\n        except Exception as e:\n            logger.error(\"Request failed exception %s\", e)\n            result = HttpGetResult(False, \"Unknown status failure\")\n\n        return result\n\n    def _process_response(self, response: requests.Response) -&gt; HttpGetResult:\n        \"\"\"Process the HTTP Requests response\n\n        Convert the provided Response object from the requests module into an\n        [HttpGetResult][healthchecks.HttpGetResult].\n\n        Args:\n            response: The [requests.Response] object from the HTTP operation\n\n        Returns:\n            An [HttpGetResult][healthchecks.HttpGetResult]\n        \"\"\"\n        result = HttpGetResult(response.status_code == 200)\n        if not result.success:\n            logger.info(\n                \"Request failed with Response Code %d: %s\",\n                response.status_code,\n                response.text,\n            )\n            result.message = f\"{response.status_code} {response.text}\"\n            return result\n\n        result.raw_response = response.text\n        return result\n\n    def _update_status_page(\n        self, check_settings: HealthCheckSettings, op_level: OpLevel\n    ) -&gt; StatusResult:\n        incident = Incident()\n        incident.name = check_settings.name\n\n        description_dict = {\n            OpLevel.Operational: \"Operating Normally\",\n            OpLevel.Degraded: \"Service Degraded\",\n            OpLevel.Partial_Outage: \"Partial Service Outage\",\n            OpLevel.Full_Outage: \"Major Service Outage\",\n        }\n        incident.description = description_dict[op_level]\n        return self.statuspage_operator.update_component_status(\n            check_settings.status_page.component_id, op_level, incident\n        )\n</code></pre>"},{"location":"api/healthchecks-reference/#pi_monitor.healthchecks.HealthCheckExecutor.__init__","title":"<code>__init__(status_operator, notifier)</code>","text":"<p>Constructor</p> <p>Constructs an instance of the HealthCheckExecutor with the given StatusPageOperator and Notifier.</p> <p>Attributes:</p> Name Type Description <code>statuspage_operator</code> <p>The name of the site being checked</p> <code>notifier</code> <p>The url to be fetched as part of the check</p> Source code in <code>pi_monitor/healthchecks.py</code> <pre><code>def __init__(\n    self,\n    status_operator: StatusPageOperator,\n    notifier: Notifier,\n):\n    \"\"\"Constructor\n\n    Constructs an instance of the HealthCheckExecutor with the given\n    [StatusPageOperator][pi_monitor.StatusPageOperator] and\n    [Notifier][pi_monitor.Notifier].\n\n    Attributes:\n        statuspage_operator: The name of the site being checked\n        notifier: The url to be fetched as part of the check\n    \"\"\"\n    self.statuspage_operator = status_operator\n    self.notifier = notifier\n</code></pre>"},{"location":"api/healthchecks-reference/#pi_monitor.healthchecks.HealthCheckExecutor._get_http","title":"<code>_get_http(url)</code>","text":"<p>Retrieve data from the URL</p> <p>Attempt to get data from the provided URL</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>The url to be retrieved</p> required <p>Returns:</p> Type Description <code>HttpGetResult</code> <p>An HttpGetResult</p> Source code in <code>pi_monitor/healthchecks.py</code> <pre><code>def _get_http(self, url: str) -&gt; HttpGetResult:\n    \"\"\"Retrieve data from the URL\n\n    Attempt to get data from the provided URL\n\n    Args:\n        url: The url to be retrieved\n\n    Returns:\n        An [HttpGetResult][pi_monitor.HttpGetResult]\n    \"\"\"\n    if not url or url == \"\":\n        result = HttpGetResult(False, \"no url defined\")\n        return result\n\n    try:\n        logger.debug(\"Requesting %s\", url)\n        r = requests.get(url)\n        result = self._process_response(r)\n    except Exception as e:\n        logger.error(\"Request failed exception %s\", e)\n        result = HttpGetResult(False, \"Unknown status failure\")\n\n    return result\n</code></pre>"},{"location":"api/healthchecks-reference/#pi_monitor.healthchecks.HealthCheckExecutor._process_response","title":"<code>_process_response(response)</code>","text":"<p>Process the HTTP Requests response</p> <p>Convert the provided Response object from the requests module into an HttpGetResult.</p> <p>Parameters:</p> Name Type Description Default <code>response</code> <code>Response</code> <p>The [requests.Response] object from the HTTP operation</p> required <p>Returns:</p> Type Description <code>HttpGetResult</code> <p>An HttpGetResult</p> Source code in <code>pi_monitor/healthchecks.py</code> <pre><code>def _process_response(self, response: requests.Response) -&gt; HttpGetResult:\n    \"\"\"Process the HTTP Requests response\n\n    Convert the provided Response object from the requests module into an\n    [HttpGetResult][healthchecks.HttpGetResult].\n\n    Args:\n        response: The [requests.Response] object from the HTTP operation\n\n    Returns:\n        An [HttpGetResult][healthchecks.HttpGetResult]\n    \"\"\"\n    result = HttpGetResult(response.status_code == 200)\n    if not result.success:\n        logger.info(\n            \"Request failed with Response Code %d: %s\",\n            response.status_code,\n            response.text,\n        )\n        result.message = f\"{response.status_code} {response.text}\"\n        return result\n\n    result.raw_response = response.text\n    return result\n</code></pre>"},{"location":"api/healthchecks-reference/#pi_monitor.healthchecks.HealthCheckExecutor.execute_health_check","title":"<code>execute_health_check(check_settings)</code>","text":"<p>Execute a health check</p> <p>Executes a health check using the provided HealthCheckSettings.</p> <p>Parameters:</p> Name Type Description Default <code>check_settings</code> <code>HealthCheckSettings</code> <p>An instance of HealthCheckSettings</p> required Source code in <code>pi_monitor/healthchecks.py</code> <pre><code>def execute_health_check(self, check_settings: HealthCheckSettings):\n    \"\"\"Execute a health check\n\n    Executes a health check using the provided HealthCheckSettings.\n\n    Args:\n        check_settings: An instance of\n            [HealthCheckSettings][pi_monitor.HealthCheckSettings]\n    \"\"\"\n    logger.info(\"Checking %s...\", check_settings.name)\n\n    send_notification = False\n\n    http_result = self._get_http(check_settings.url)\n\n    if http_result.success:\n        # Good Check\n        logger.info(\"Status OK\")\n        op_level = OpLevel.Operational\n    else:\n        # Bad check\n        op_level = OpLevel.Full_Outage\n        logger.warning(http_result.message)\n        send_notification = True\n\n    notification_text = http_result.message\n    if check_settings.status_page and check_settings.status_page.component_id != \"\":\n        status_result = self._update_status_page(check_settings, op_level)\n        send_notification = (\n            status_result.incident_result.incident_created\n            or status_result.incident_result.incident_resolved\n        )\n        notification_text = status_result.incident_result.incident.description\n\n    if (\n        send_notification\n        and notification_text is not None\n        and notification_text != \"\"\n    ):\n        logger.info(\"Sending notification: %s\", notification_text)\n        self.notifier.notify(check_settings.name, notification_text)\n</code></pre>"},{"location":"api/healthchecks-reference/#pi_monitor.healthchecks.HttpGetResult","title":"<code>HttpGetResult</code>","text":"<p>HttpGetResult</p> <p>Attributes:</p> Name Type Description <code>success</code> <code>bool</code> <p>Whether or not the request was successful</p> <code>message</code> <code>str</code> <p>The error message from an unsuccessful request</p> <code>raw_response</code> <code>str</code> <p>The string value of the response body</p> <code>response</code> <code>any</code> <p>An object representing the response body converted as JSON</p> Source code in <code>pi_monitor/healthchecks.py</code> <pre><code>class HttpGetResult:\n    \"\"\"HttpGetResult\n\n    Attributes:\n        success: Whether or not the request was successful\n        message: The error message from an unsuccessful request\n        raw_response: The string value of the response body\n        response: An object representing the response body converted as JSON\n\n    \"\"\"\n\n    success: bool = True\n    message: str = \"\"\n    raw_response: str\n    response: any = {}\n\n    def __init__(self, success: bool, msg: str = \"\"):\n        self.success = success\n        self.message = msg\n</code></pre>"},{"location":"api/notifications-reference/","title":"Notifications","text":""},{"location":"api/notifications-reference/#pi_monitor.notifications.Notifier","title":"<code>Notifier</code>","text":"<p>Notifier Class</p> <p>The Notifier class encapsulates the functionality to send email notifications.</p> <p>Attributes:</p> Name Type Description <code>config</code> <code>NotificationSettings</code> <p>An instance of NotificationSettings</p> Source code in <code>pi_monitor/notifications.py</code> <pre><code>class Notifier:\n    \"\"\"Notifier Class\n\n    The Notifier class encapsulates the functionality to send email notifications.\n\n    Attributes:\n        config: An instance of [NotificationSettings][pi_monitor.NotificationSettings]\n    \"\"\"\n\n    config: NotificationSettings\n\n    def __init__(self, notify_config: NotificationSettings) -&gt; None:\n        \"\"\"Constructor\n\n        Initialize the instance using the provided\n        [NotificationSettings][pi_monitor.NotificationSettings].\n\n        \"\"\"\n        self.config = notify_config\n\n    def notify(self, subject: str, content: str) -&gt; bool:\n        \"\"\"Send notification\n\n        Build and send an email notificaiton using the provided parameters.\n\n        Args:\n            subject: The email subject.\n            content: the email content.\n\n        \"\"\"\n\n        if self.config is None:\n            logger.info(\"No configuration provided.  Skipping...\")\n            return True\n\n        if self.config.sms_email is not None and self.config.sms_email != \"\":\n            logger.info(\"Sending Notification to %s\", self.config.sms_email)\n\n            message = Mail(\n                from_email=self.config.smtp_sender_id,\n                to_emails=self.config.sms_email,\n                subject=subject,\n                plain_text_content=content,\n                html_content=content,\n            )\n            try:\n                sg = SendGridAPIClient(self.config.smtp_sender_apikey)\n                response = sg.send(message)\n                return response.status_code == 202\n            except Exception as e:\n                logger.error(\"Error sending mail: %s\", e)\n                return False\n        else:\n            logger.info(\"No email address provided for notification.  Skipping...\")\n            return True\n</code></pre>"},{"location":"api/notifications-reference/#pi_monitor.notifications.Notifier.__init__","title":"<code>__init__(notify_config)</code>","text":"<p>Constructor</p> <p>Initialize the instance using the provided NotificationSettings.</p> Source code in <code>pi_monitor/notifications.py</code> <pre><code>def __init__(self, notify_config: NotificationSettings) -&gt; None:\n    \"\"\"Constructor\n\n    Initialize the instance using the provided\n    [NotificationSettings][pi_monitor.NotificationSettings].\n\n    \"\"\"\n    self.config = notify_config\n</code></pre>"},{"location":"api/notifications-reference/#pi_monitor.notifications.Notifier.notify","title":"<code>notify(subject, content)</code>","text":"<p>Send notification</p> <p>Build and send an email notificaiton using the provided parameters.</p> <p>Parameters:</p> Name Type Description Default <code>subject</code> <code>str</code> <p>The email subject.</p> required <code>content</code> <code>str</code> <p>the email content.</p> required Source code in <code>pi_monitor/notifications.py</code> <pre><code>def notify(self, subject: str, content: str) -&gt; bool:\n    \"\"\"Send notification\n\n    Build and send an email notificaiton using the provided parameters.\n\n    Args:\n        subject: The email subject.\n        content: the email content.\n\n    \"\"\"\n\n    if self.config is None:\n        logger.info(\"No configuration provided.  Skipping...\")\n        return True\n\n    if self.config.sms_email is not None and self.config.sms_email != \"\":\n        logger.info(\"Sending Notification to %s\", self.config.sms_email)\n\n        message = Mail(\n            from_email=self.config.smtp_sender_id,\n            to_emails=self.config.sms_email,\n            subject=subject,\n            plain_text_content=content,\n            html_content=content,\n        )\n        try:\n            sg = SendGridAPIClient(self.config.smtp_sender_apikey)\n            response = sg.send(message)\n            return response.status_code == 202\n        except Exception as e:\n            logger.error(\"Error sending mail: %s\", e)\n            return False\n    else:\n        logger.info(\"No email address provided for notification.  Skipping...\")\n        return True\n</code></pre>"},{"location":"api/statuspage_io-reference/","title":"StatusPage.io","text":""},{"location":"api/statuspage_io-reference/#pi_monitor.statuspage_io.Incident","title":"<code>Incident</code>","text":"<p>Incident Class</p> <p>This class represents the details about a Statuspage.io incident</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>The incident name.</p> <code>description</code> <code>str</code> <p>The incident description.</p> Source code in <code>pi_monitor/statuspage_io.py</code> <pre><code>class Incident:\n    \"\"\"Incident Class\n\n    This class represents the details about a Statuspage.io incident\n\n    Attributes:\n        name: The incident name.\n        description: The incident description.\n\n    \"\"\"\n\n    name: str = \"Incident Name\"\n    description: str = \"Incident Description\"\n</code></pre>"},{"location":"api/statuspage_io-reference/#pi_monitor.statuspage_io.IncidentResult","title":"<code>IncidentResult</code>","text":"<p>IncidentResult Class</p> <p>This class represents information about incidents created or resolved as part of a status change</p> <p>Attributes:</p> Name Type Description <code>incident_created</code> <code>bool</code> <p>True if an incident was created, false otherwise.</p> <code>incident_resolved</code> <code>bool</code> <p>True if an incident was created, false otherwise.</p> Source code in <code>pi_monitor/statuspage_io.py</code> <pre><code>class IncidentResult:\n    \"\"\"IncidentResult Class\n\n    This class represents information about incidents created or resolved as part of\n    a status change\n\n    Attributes:\n        incident_created: True if an incident was created, false otherwise.\n        incident_resolved: True if an incident was created, false otherwise.\n\n    \"\"\"\n\n    incident_created: bool = False\n    incident_resolved: bool = False\n    incident: Incident\n\n    def __init__(self):\n        self.incident_created = False\n        self.incident_resolved = False\n        self.incident = Incident()\n</code></pre>"},{"location":"api/statuspage_io-reference/#pi_monitor.statuspage_io.StatusPageOperator","title":"<code>StatusPageOperator</code>","text":"<p>StatusResult Class</p> <p>This class represents information about actions taken during a check and update.</p> <p>Attributes:</p> Name Type Description <code>config</code> <code>StatusPageSettings</code> <p>An instance of StatusPageSettings     which contains settings for Statuspage.io communication</p> <code>client</code> <code>StatusPageClient</code> <p>An instance of     StatusPageClient,     built from the configuration values provided.</p> Source code in <code>pi_monitor/statuspage_io.py</code> <pre><code>class StatusPageOperator:\n    \"\"\"StatusResult Class\n\n    This class represents information about actions taken during a check and update.\n\n    Attributes:\n        config: An instance of [StatusPageSettings][pi_monitor.StatusPageSettings]\n                which contains settings for Statuspage.io communication\n        client: An instance of\n                [StatusPageClient][pi_monitor.statuspage_io_client.StatusPageClient],\n                built from the configuration values provided.\n\n    \"\"\"\n\n    config: StatusPageSettings = StatusPageSettings()\n    client: StatusPageClient\n\n    def __init__(self, status_page_config: StatusPageSettings):\n        \"\"\"Constructor\n\n        Initialize the instance using the provided\n        [StatusPageSettings][pi_monitor.StatusPageSettings].\n\n        \"\"\"\n        if status_page_config is None:\n            raise ValueError(\"No configuration provided\")\n\n        self.config = status_page_config\n        self.client = StatusPageClient(self.config.api_key, self.config.page_id)\n\n    def is_configured(self) -&gt; bool:\n        \"\"\"Validate configuration data\n\n        Returns:\n            True if the operator has a valid configuration, False otherwise.\n        \"\"\"\n        return self.config.api_key != \"\"\n\n    def update_component_status(\n        self, component_id: str, op_level: OpLevel, incident_details: Incident = {}\n    ) -&gt; StatusResult:\n        \"\"\"Update Component Status\n\n        Using the provided OpLevel, determine the component's statuspage.io status.\n\n        If the incoming `op_level` is [Operational][pi_monitor.enums.OpLevel] and the\n        statuspage.io status is not, the component's status will be changed to\n        `operational`, and any open incidents for that component will be resolved.\n\n        If the incoming `op_level` is any other value and the statuspage.io status is\n        operational, the component's status will be changed to `major_outage` and an\n        incident will be created using the provided `incident_details`\n\n\n        Args:\n            component_id: The component ID to check\n            op_level: The current OpLevel for the provided component\n            incident_details: An instance of\n                              [Incident][pi_monitor.statuspage_io.Incident]\n                              which has the details of the incident to be created,\n                                if necessary.\n\n        Returns:\n            An instance of [StatusResult][pi_monitor.statuspage_io.StatusResult]\n        \"\"\"\n\n        if op_level == OpLevel.Operational:\n            component_status = \"operational\"\n        else:\n            component_status = \"major_outage\"\n\n        result = StatusResult()\n        component = self.client.get_component(component_id)\n        if component is None:\n            logger.warning(\"Failed to retrieve component %s\", component_id)\n            return result\n\n        if (\n            component.status != component_status\n            and component.status != \"under_maintenance\"\n        ):\n            result.status_changed = True\n            logger.info(\n                \"Changing status from %s to %s\", component.status, component_status\n            )\n            self._update_component_status(component_id, component_status)\n            result.incident_result = self._process_incident_on_status_change(\n                component_id, component_status, incident_details\n            )\n\n        return result\n\n    def _update_component_status(self, component_id, new_component_status):\n        logger.debug(\n            \"Setting component status to %s: %s\", new_component_status, component_id\n        )\n        payload = {\"component\": {\"status\": new_component_status}}\n        component = self.client.update_component(component_id, payload)\n        if component is None:\n            logger.warning(\"Failed to update component %s\", component_id)\n\n    def _filter_set(self, incidents, component_id):\n        def iterator_func(incident):\n            for comp in incident.components:\n                if comp.id == component_id:\n                    return True\n            return False\n\n        return filter(iterator_func, incidents)\n\n    def _get_associated_incident(self, component_id):\n        result = self.client.get_unresolved_incidents()\n        if result is None:\n            return []\n        return list(self._filter_set(result, component_id))\n\n    def _process_incident_on_status_change(\n        self, component_id: str, new_component_status: str, incident_details: Incident\n    ) -&gt; IncidentResult:\n        \"\"\"Create or Close incidents based on the incoming component status\n\n        For now, if it's operational, close open incidents, and if it's not operational\n        , create a new ticket if one isn't already open for this component.\n        Future state will involve more detail around outage and maintenance\n        \"\"\"\n        incident_result = IncidentResult()\n        incident_result.incident = incident_details\n\n        associated_incidents = self._get_associated_incident(component_id)\n        asscociated_incident_count = len(associated_incidents)\n        logger.info(\n            \"Associated Incidents for %s: %d\", component_id, asscociated_incident_count\n        )\n\n        if new_component_status == \"operational\" and asscociated_incident_count &gt; 0:\n            for incident in associated_incidents:\n                self._close_incident(incident.id)\n                incident_result.incident_resolved = True\n\n        elif new_component_status == \"major_outage\" and asscociated_incident_count == 0:\n            self._create_incident(component_id, new_component_status, incident_details)\n            incident_result.incident_created = True\n\n        return incident_result\n\n    def _close_incident(self, incident_id):\n        logger.info(\"Closing incident %s\", incident_id)\n        payload = {\"incident\": {\"status\": \"resolved\"}}\n        self.client.update_incident(incident_id, payload)\n\n    def _create_incident(\n        self, component_id, new_component_status: str, incident_details: Incident\n    ):\n        logger.info(\n            \"Creating incident: Component %s - New Component Status %s\",\n            component_id,\n            new_component_status,\n        )\n        payload = {\n            \"incident\": {\n                \"name\": incident_details.name,\n                \"status\": \"investigating\",\n                \"body\": incident_details.description,\n                \"component_ids\": [component_id],\n                \"components\": {component_id: new_component_status},\n            }\n        }\n        self.client.create_incident(payload)\n</code></pre>"},{"location":"api/statuspage_io-reference/#pi_monitor.statuspage_io.StatusPageOperator.__init__","title":"<code>__init__(status_page_config)</code>","text":"<p>Constructor</p> <p>Initialize the instance using the provided StatusPageSettings.</p> Source code in <code>pi_monitor/statuspage_io.py</code> <pre><code>def __init__(self, status_page_config: StatusPageSettings):\n    \"\"\"Constructor\n\n    Initialize the instance using the provided\n    [StatusPageSettings][pi_monitor.StatusPageSettings].\n\n    \"\"\"\n    if status_page_config is None:\n        raise ValueError(\"No configuration provided\")\n\n    self.config = status_page_config\n    self.client = StatusPageClient(self.config.api_key, self.config.page_id)\n</code></pre>"},{"location":"api/statuspage_io-reference/#pi_monitor.statuspage_io.StatusPageOperator._process_incident_on_status_change","title":"<code>_process_incident_on_status_change(component_id, new_component_status, incident_details)</code>","text":"<p>Create or Close incidents based on the incoming component status</p> <p>For now, if it's operational, close open incidents, and if it's not operational , create a new ticket if one isn't already open for this component. Future state will involve more detail around outage and maintenance</p> Source code in <code>pi_monitor/statuspage_io.py</code> <pre><code>def _process_incident_on_status_change(\n    self, component_id: str, new_component_status: str, incident_details: Incident\n) -&gt; IncidentResult:\n    \"\"\"Create or Close incidents based on the incoming component status\n\n    For now, if it's operational, close open incidents, and if it's not operational\n    , create a new ticket if one isn't already open for this component.\n    Future state will involve more detail around outage and maintenance\n    \"\"\"\n    incident_result = IncidentResult()\n    incident_result.incident = incident_details\n\n    associated_incidents = self._get_associated_incident(component_id)\n    asscociated_incident_count = len(associated_incidents)\n    logger.info(\n        \"Associated Incidents for %s: %d\", component_id, asscociated_incident_count\n    )\n\n    if new_component_status == \"operational\" and asscociated_incident_count &gt; 0:\n        for incident in associated_incidents:\n            self._close_incident(incident.id)\n            incident_result.incident_resolved = True\n\n    elif new_component_status == \"major_outage\" and asscociated_incident_count == 0:\n        self._create_incident(component_id, new_component_status, incident_details)\n        incident_result.incident_created = True\n\n    return incident_result\n</code></pre>"},{"location":"api/statuspage_io-reference/#pi_monitor.statuspage_io.StatusPageOperator.is_configured","title":"<code>is_configured()</code>","text":"<p>Validate configuration data</p> <p>Returns:</p> Type Description <code>bool</code> <p>True if the operator has a valid configuration, False otherwise.</p> Source code in <code>pi_monitor/statuspage_io.py</code> <pre><code>def is_configured(self) -&gt; bool:\n    \"\"\"Validate configuration data\n\n    Returns:\n        True if the operator has a valid configuration, False otherwise.\n    \"\"\"\n    return self.config.api_key != \"\"\n</code></pre>"},{"location":"api/statuspage_io-reference/#pi_monitor.statuspage_io.StatusPageOperator.update_component_status","title":"<code>update_component_status(component_id, op_level, incident_details={})</code>","text":"<p>Update Component Status</p> <p>Using the provided OpLevel, determine the component's statuspage.io status.</p> <p>If the incoming <code>op_level</code> is Operational and the statuspage.io status is not, the component's status will be changed to <code>operational</code>, and any open incidents for that component will be resolved.</p> <p>If the incoming <code>op_level</code> is any other value and the statuspage.io status is operational, the component's status will be changed to <code>major_outage</code> and an incident will be created using the provided <code>incident_details</code></p> <p>Parameters:</p> Name Type Description Default <code>component_id</code> <code>str</code> <p>The component ID to check</p> required <code>op_level</code> <code>OpLevel</code> <p>The current OpLevel for the provided component</p> required <code>incident_details</code> <code>Incident</code> <p>An instance of               Incident               which has the details of the incident to be created,                 if necessary.</p> <code>{}</code> <p>Returns:</p> Type Description <code>StatusResult</code> <p>An instance of StatusResult</p> Source code in <code>pi_monitor/statuspage_io.py</code> <pre><code>def update_component_status(\n    self, component_id: str, op_level: OpLevel, incident_details: Incident = {}\n) -&gt; StatusResult:\n    \"\"\"Update Component Status\n\n    Using the provided OpLevel, determine the component's statuspage.io status.\n\n    If the incoming `op_level` is [Operational][pi_monitor.enums.OpLevel] and the\n    statuspage.io status is not, the component's status will be changed to\n    `operational`, and any open incidents for that component will be resolved.\n\n    If the incoming `op_level` is any other value and the statuspage.io status is\n    operational, the component's status will be changed to `major_outage` and an\n    incident will be created using the provided `incident_details`\n\n\n    Args:\n        component_id: The component ID to check\n        op_level: The current OpLevel for the provided component\n        incident_details: An instance of\n                          [Incident][pi_monitor.statuspage_io.Incident]\n                          which has the details of the incident to be created,\n                            if necessary.\n\n    Returns:\n        An instance of [StatusResult][pi_monitor.statuspage_io.StatusResult]\n    \"\"\"\n\n    if op_level == OpLevel.Operational:\n        component_status = \"operational\"\n    else:\n        component_status = \"major_outage\"\n\n    result = StatusResult()\n    component = self.client.get_component(component_id)\n    if component is None:\n        logger.warning(\"Failed to retrieve component %s\", component_id)\n        return result\n\n    if (\n        component.status != component_status\n        and component.status != \"under_maintenance\"\n    ):\n        result.status_changed = True\n        logger.info(\n            \"Changing status from %s to %s\", component.status, component_status\n        )\n        self._update_component_status(component_id, component_status)\n        result.incident_result = self._process_incident_on_status_change(\n            component_id, component_status, incident_details\n        )\n\n    return result\n</code></pre>"},{"location":"api/statuspage_io-reference/#pi_monitor.statuspage_io.StatusResult","title":"<code>StatusResult</code>","text":"<p>StatusResult Class</p> <p>This class represents information about actions taken during a check and update.</p> <p>Attributes:</p> Name Type Description <code>status_changed</code> <code>bool</code> <p>True if the status has changed from the previous check,             false otherwise.</p> <code>incident_result</code> <code>IncidentResult</code> <p>An instance of             IncidentResult.</p> Source code in <code>pi_monitor/statuspage_io.py</code> <pre><code>class StatusResult:\n    \"\"\"StatusResult Class\n\n    This class represents information about actions taken during a check and update.\n\n    Attributes:\n        status_changed: True if the status has changed from the previous check,\n                        false otherwise.\n        incident_result: An instance of\n                        [IncidentResult][pi_monitor.statuspage_io.IncidentResult].\n\n    \"\"\"\n\n    status_changed: bool = False\n    incident_result: IncidentResult = IncidentResult()\n\n    def __init__(self):\n        self.incident_result = IncidentResult()\n</code></pre>"},{"location":"api/statuspage_io_client-reference/","title":"StatusPage.io Client","text":""},{"location":"api/statuspage_io_client-reference/#pi_monitor.statuspage_io_client.StatusPageClient","title":"<code>StatusPageClient</code>","text":"<p>StatusPageClient Class</p> <p>The StatusPageClient class provides methods for interacting with the Statuspage.io's APIs</p> <p>Attributes:</p> Name Type Description <code>component_status_list</code> <code>List[str]</code> <p>A list of valid component status codes for StatusPage.io</p> <code>incident_status_list</code> <code>List[str]</code> <p>A list of valid incident status codes for live incidents                     in StatusPage.io</p> <code>scheduled_incident_status_list</code> <code>List[str]</code> <p>A list of valid incident status codes for                             scheduledStatusPage.io</p> Source code in <code>pi_monitor/statuspage_io_client.py</code> <pre><code>class StatusPageClient:\n    \"\"\"StatusPageClient Class\n\n    The StatusPageClient class provides methods for interacting with the\n    [Statuspage.io's APIs](https://developer.statuspage.io/)\n\n    Attributes:\n        component_status_list: A list of valid component status codes for StatusPage.io\n        incident_status_list: A list of valid incident status codes for live incidents\n                                in StatusPage.io\n        scheduled_incident_status_list: A list of valid incident status codes for\n                                        scheduledStatusPage.io\n    \"\"\"\n\n    AUTH_HEADER = \"Authorization\"\n    STATUS_PAGE_BASE_URL = \"https://api.statuspage.io/v1/pages\"\n    CLIENT_ERROR_MESSAGE = \"Request failed exception:\"\n\n    component_status_list: List[str] = [\n        \"operational\",\n        \"under_maintenance\",\n        \"degraded_performance\",\n        \"partial_outage\",\n        \"major_outage\",\n    ]\n    incident_status_list: List[str] = [\n        \"investigating\",\n        \"identified\",\n        \"monitoring\",\n        \"resolved\",\n    ]\n    scheduled_incident_status_list: List[str] = [\n        \"scheduled\",\n        \"in_progress\",\n        \"verifying\",\n        \"complete\",\n    ]\n\n    def __init__(self, api_key: str, page_id: str):\n        self.api_key = api_key\n        self.page_id = page_id\n\n    def _get_headers(self) -&gt; Dict[str, str]:\n        \"\"\"Retrieve headers for all requests\n\n        This function adds the necessary `Authorization` and `Content-Type` headers\n        for the API to operate using JSON.\n\n        Returns:\n            A Dictionary that represents the headers for request to Statuspage.io\n\n        \"\"\"\n        return {\n            f\"{self.AUTH_HEADER}\": f\"OAuth {self.api_key}\",\n            \"Content-Type\": \"application/json\",\n        }\n\n    def get_component(self, component_id: str) -&gt; object:\n        \"\"\"Retrieve Component Information\n\n        Retrieve the current component information using the provided component_id.\n\n        Args:\n            component_id: The id of the component to retrieve.\n\n        Returns:\n            A SimpleNamespace object created from the JSON return.  Object\n                representation can be found in the\n                [docs](https://developer.statuspage.io/#operation/getPagesPageIdComponentsComponentId).\n\n        \"\"\"\n        component_url = (\n            f\"{self.STATUS_PAGE_BASE_URL}/{self.page_id}/components/{component_id}\"\n        )\n        logger.debug(\"Retrieving component from StatusPage: %s\", component_url)\n        try:\n            component = requests.get(component_url, headers=self._get_headers())\n            logger.debug(\"Component Response: %s\", component.text)\n\n            if component.status_code == 404:\n                logger.warning(\"Component %s not found\", component_id)\n\n            return component.json(object_hook=lambda d: SimpleNamespace(**d))\n        except Exception as e:\n            self._handle_exception(e)\n\n    def update_component(self, component_id: str, payload: object) -&gt; object:\n        \"\"\"Update Component Information\n\n        Update the given component using the provided payload as the object body.  The\n        payload object will be processed using `json.dumps()`.\n\n        Args:\n            component_id: The id of the component to update.\n            payload: An object representing the JSON payload.  Valid object\n                representation can be found in the\n                [docs](https://developer.statuspage.io/#operation/putPagesPageIdComponentsComponentId).\n\n        Returns:\n            A SimpleNamespace object created from the JSON return.  Object\n                representation can be found in the\n                [docs](https://developer.statuspage.io/#operation/putPagesPageIdComponentsComponentId).\n\n        \"\"\"\n        component_url = (\n            f\"{self.STATUS_PAGE_BASE_URL}/{self.page_id}/components/{component_id}\"\n        )\n        logger.debug(\"Updating component %s: %s\", component_id, payload)\n        try:\n            r = requests.put(\n                component_url, headers=self._get_headers(), data=json.dumps(payload)\n            )\n            return r.json(object_hook=lambda d: SimpleNamespace(**d))\n        except Exception as e:\n            self._handle_exception(e)\n\n    def get_unresolved_incidents(self) -&gt; object:\n        \"\"\"Retrieve Unresolved Incidents\n\n        Retrieve all the current unresolved incidents.\n\n        Returns:\n            A SimpleNamespace object created from the JSON return.  Object\n                representation can be found in the\n                [docs](https://developer.statuspage.io/#operation/getPagesPageIdIncidentsUnresolved).\n\n        \"\"\"\n        logger.info(\"Retrieving unresolved incidents\")\n        unresolved_incidents_url = (\n            f\"{self.STATUS_PAGE_BASE_URL}/{self.page_id}/incidents/unresolved\"\n        )\n        try:\n            unresolved_incidents_response = requests.get(\n                unresolved_incidents_url, headers=self._get_headers()\n            )\n            result = unresolved_incidents_response.json(\n                object_hook=lambda d: SimpleNamespace(**d)\n            )\n            return result\n        except Exception as e:\n            self._handle_exception(e)\n\n    def create_incident(self, payload: object) -&gt; object:\n        \"\"\"Create Incident\n\n        Create a new incident using the provided payload as the object body.  The\n        payload object will be processed using `json.dumps()`.\n\n        Args:\n            payload: An object representing the JSON payload.  Valid object\n                representation can be found in the\n                [docs](https://developer.statuspage.io/#operation/postPagesPageIdIncidents).\n\n        Returns:\n            A SimpleNamespace object created from the JSON return.  Object\n                representation can be found in the\n                [docs](https://developer.statuspage.io/#operation/postPagesPageIdIncidents).\n\n        \"\"\"\n        incident_url = f\"{self.STATUS_PAGE_BASE_URL}/{self.page_id}/incidents\"\n        logger.info(\"Creating incident: %s\", incident_url)\n        try:\n            r = requests.post(\n                incident_url, headers=self._get_headers(), data=json.dumps(payload)\n            )\n            result_object = r.json(object_hook=lambda d: SimpleNamespace(**d))\n            logger.debug(\"Create Incident Response: %s\", result_object)\n            return result_object\n        except Exception as e:\n            self._handle_exception(e)\n\n    def update_incident(self, incident_id: str, payload: object) -&gt; object:\n        \"\"\"Update Incident Information\n\n        Update the given incident using the provided payload as the object body.  The\n        payload object will be processed using `json.dumps()`.\n\n        Args:\n            incident_id: The id of the incident to update.\n            payload: An object representing the JSON payload.  Valid object\n                representation can be found in the\n                [docs](https://developer.statuspage.io/#operation/patchPagesPageIdIncidentsIncidentId).\n\n        Returns:\n            A SimpleNamespace object created from the JSON return.  Object\n                representation can be found in the\n                [docs](https://developer.statuspage.io/#operation/patchPagesPageIdIncidentsIncidentId).\n\n        \"\"\"\n        incident_url = (\n            f\"{self.STATUS_PAGE_BASE_URL}/{self.page_id}/incidents/{incident_id}\"\n        )\n        logger.info(\"Updating incident %s: %s\", incident_url, incident_id)\n        try:\n            r = requests.patch(\n                incident_url, headers=self._get_headers(), data=json.dumps(payload)\n            )\n            result_object = r.json(object_hook=lambda d: SimpleNamespace(**d))\n            logger.debug(\"Update Incident Response: %s\", result_object)\n            return result_object\n        except Exception as e:\n            self._handle_exception(e)\n\n    def _handle_exception(self, e: Exception):\n        logger.error(\"%s %s\", self.CLIENT_ERROR_MESSAGE, e)\n</code></pre>"},{"location":"api/statuspage_io_client-reference/#pi_monitor.statuspage_io_client.StatusPageClient._get_headers","title":"<code>_get_headers()</code>","text":"<p>Retrieve headers for all requests</p> <p>This function adds the necessary <code>Authorization</code> and <code>Content-Type</code> headers for the API to operate using JSON.</p> <p>Returns:</p> Type Description <code>Dict[str, str]</code> <p>A Dictionary that represents the headers for request to Statuspage.io</p> Source code in <code>pi_monitor/statuspage_io_client.py</code> <pre><code>def _get_headers(self) -&gt; Dict[str, str]:\n    \"\"\"Retrieve headers for all requests\n\n    This function adds the necessary `Authorization` and `Content-Type` headers\n    for the API to operate using JSON.\n\n    Returns:\n        A Dictionary that represents the headers for request to Statuspage.io\n\n    \"\"\"\n    return {\n        f\"{self.AUTH_HEADER}\": f\"OAuth {self.api_key}\",\n        \"Content-Type\": \"application/json\",\n    }\n</code></pre>"},{"location":"api/statuspage_io_client-reference/#pi_monitor.statuspage_io_client.StatusPageClient.create_incident","title":"<code>create_incident(payload)</code>","text":"<p>Create Incident</p> <p>Create a new incident using the provided payload as the object body.  The payload object will be processed using <code>json.dumps()</code>.</p> <p>Parameters:</p> Name Type Description Default <code>payload</code> <code>object</code> <p>An object representing the JSON payload.  Valid object representation can be found in the docs.</p> required <p>Returns:</p> Type Description <code>object</code> <p>A SimpleNamespace object created from the JSON return.  Object representation can be found in the docs.</p> Source code in <code>pi_monitor/statuspage_io_client.py</code> <pre><code>def create_incident(self, payload: object) -&gt; object:\n    \"\"\"Create Incident\n\n    Create a new incident using the provided payload as the object body.  The\n    payload object will be processed using `json.dumps()`.\n\n    Args:\n        payload: An object representing the JSON payload.  Valid object\n            representation can be found in the\n            [docs](https://developer.statuspage.io/#operation/postPagesPageIdIncidents).\n\n    Returns:\n        A SimpleNamespace object created from the JSON return.  Object\n            representation can be found in the\n            [docs](https://developer.statuspage.io/#operation/postPagesPageIdIncidents).\n\n    \"\"\"\n    incident_url = f\"{self.STATUS_PAGE_BASE_URL}/{self.page_id}/incidents\"\n    logger.info(\"Creating incident: %s\", incident_url)\n    try:\n        r = requests.post(\n            incident_url, headers=self._get_headers(), data=json.dumps(payload)\n        )\n        result_object = r.json(object_hook=lambda d: SimpleNamespace(**d))\n        logger.debug(\"Create Incident Response: %s\", result_object)\n        return result_object\n    except Exception as e:\n        self._handle_exception(e)\n</code></pre>"},{"location":"api/statuspage_io_client-reference/#pi_monitor.statuspage_io_client.StatusPageClient.get_component","title":"<code>get_component(component_id)</code>","text":"<p>Retrieve Component Information</p> <p>Retrieve the current component information using the provided component_id.</p> <p>Parameters:</p> Name Type Description Default <code>component_id</code> <code>str</code> <p>The id of the component to retrieve.</p> required <p>Returns:</p> Type Description <code>object</code> <p>A SimpleNamespace object created from the JSON return.  Object representation can be found in the docs.</p> Source code in <code>pi_monitor/statuspage_io_client.py</code> <pre><code>def get_component(self, component_id: str) -&gt; object:\n    \"\"\"Retrieve Component Information\n\n    Retrieve the current component information using the provided component_id.\n\n    Args:\n        component_id: The id of the component to retrieve.\n\n    Returns:\n        A SimpleNamespace object created from the JSON return.  Object\n            representation can be found in the\n            [docs](https://developer.statuspage.io/#operation/getPagesPageIdComponentsComponentId).\n\n    \"\"\"\n    component_url = (\n        f\"{self.STATUS_PAGE_BASE_URL}/{self.page_id}/components/{component_id}\"\n    )\n    logger.debug(\"Retrieving component from StatusPage: %s\", component_url)\n    try:\n        component = requests.get(component_url, headers=self._get_headers())\n        logger.debug(\"Component Response: %s\", component.text)\n\n        if component.status_code == 404:\n            logger.warning(\"Component %s not found\", component_id)\n\n        return component.json(object_hook=lambda d: SimpleNamespace(**d))\n    except Exception as e:\n        self._handle_exception(e)\n</code></pre>"},{"location":"api/statuspage_io_client-reference/#pi_monitor.statuspage_io_client.StatusPageClient.get_unresolved_incidents","title":"<code>get_unresolved_incidents()</code>","text":"<p>Retrieve Unresolved Incidents</p> <p>Retrieve all the current unresolved incidents.</p> <p>Returns:</p> Type Description <code>object</code> <p>A SimpleNamespace object created from the JSON return.  Object representation can be found in the docs.</p> Source code in <code>pi_monitor/statuspage_io_client.py</code> <pre><code>def get_unresolved_incidents(self) -&gt; object:\n    \"\"\"Retrieve Unresolved Incidents\n\n    Retrieve all the current unresolved incidents.\n\n    Returns:\n        A SimpleNamespace object created from the JSON return.  Object\n            representation can be found in the\n            [docs](https://developer.statuspage.io/#operation/getPagesPageIdIncidentsUnresolved).\n\n    \"\"\"\n    logger.info(\"Retrieving unresolved incidents\")\n    unresolved_incidents_url = (\n        f\"{self.STATUS_PAGE_BASE_URL}/{self.page_id}/incidents/unresolved\"\n    )\n    try:\n        unresolved_incidents_response = requests.get(\n            unresolved_incidents_url, headers=self._get_headers()\n        )\n        result = unresolved_incidents_response.json(\n            object_hook=lambda d: SimpleNamespace(**d)\n        )\n        return result\n    except Exception as e:\n        self._handle_exception(e)\n</code></pre>"},{"location":"api/statuspage_io_client-reference/#pi_monitor.statuspage_io_client.StatusPageClient.update_component","title":"<code>update_component(component_id, payload)</code>","text":"<p>Update Component Information</p> <p>Update the given component using the provided payload as the object body.  The payload object will be processed using <code>json.dumps()</code>.</p> <p>Parameters:</p> Name Type Description Default <code>component_id</code> <code>str</code> <p>The id of the component to update.</p> required <code>payload</code> <code>object</code> <p>An object representing the JSON payload.  Valid object representation can be found in the docs.</p> required <p>Returns:</p> Type Description <code>object</code> <p>A SimpleNamespace object created from the JSON return.  Object representation can be found in the docs.</p> Source code in <code>pi_monitor/statuspage_io_client.py</code> <pre><code>def update_component(self, component_id: str, payload: object) -&gt; object:\n    \"\"\"Update Component Information\n\n    Update the given component using the provided payload as the object body.  The\n    payload object will be processed using `json.dumps()`.\n\n    Args:\n        component_id: The id of the component to update.\n        payload: An object representing the JSON payload.  Valid object\n            representation can be found in the\n            [docs](https://developer.statuspage.io/#operation/putPagesPageIdComponentsComponentId).\n\n    Returns:\n        A SimpleNamespace object created from the JSON return.  Object\n            representation can be found in the\n            [docs](https://developer.statuspage.io/#operation/putPagesPageIdComponentsComponentId).\n\n    \"\"\"\n    component_url = (\n        f\"{self.STATUS_PAGE_BASE_URL}/{self.page_id}/components/{component_id}\"\n    )\n    logger.debug(\"Updating component %s: %s\", component_id, payload)\n    try:\n        r = requests.put(\n            component_url, headers=self._get_headers(), data=json.dumps(payload)\n        )\n        return r.json(object_hook=lambda d: SimpleNamespace(**d))\n    except Exception as e:\n        self._handle_exception(e)\n</code></pre>"},{"location":"api/statuspage_io_client-reference/#pi_monitor.statuspage_io_client.StatusPageClient.update_incident","title":"<code>update_incident(incident_id, payload)</code>","text":"<p>Update Incident Information</p> <p>Update the given incident using the provided payload as the object body.  The payload object will be processed using <code>json.dumps()</code>.</p> <p>Parameters:</p> Name Type Description Default <code>incident_id</code> <code>str</code> <p>The id of the incident to update.</p> required <code>payload</code> <code>object</code> <p>An object representing the JSON payload.  Valid object representation can be found in the docs.</p> required <p>Returns:</p> Type Description <code>object</code> <p>A SimpleNamespace object created from the JSON return.  Object representation can be found in the docs.</p> Source code in <code>pi_monitor/statuspage_io_client.py</code> <pre><code>def update_incident(self, incident_id: str, payload: object) -&gt; object:\n    \"\"\"Update Incident Information\n\n    Update the given incident using the provided payload as the object body.  The\n    payload object will be processed using `json.dumps()`.\n\n    Args:\n        incident_id: The id of the incident to update.\n        payload: An object representing the JSON payload.  Valid object\n            representation can be found in the\n            [docs](https://developer.statuspage.io/#operation/patchPagesPageIdIncidentsIncidentId).\n\n    Returns:\n        A SimpleNamespace object created from the JSON return.  Object\n            representation can be found in the\n            [docs](https://developer.statuspage.io/#operation/patchPagesPageIdIncidentsIncidentId).\n\n    \"\"\"\n    incident_url = (\n        f\"{self.STATUS_PAGE_BASE_URL}/{self.page_id}/incidents/{incident_id}\"\n    )\n    logger.info(\"Updating incident %s: %s\", incident_url, incident_id)\n    try:\n        r = requests.patch(\n            incident_url, headers=self._get_headers(), data=json.dumps(payload)\n        )\n        result_object = r.json(object_hook=lambda d: SimpleNamespace(**d))\n        logger.debug(\"Update Incident Response: %s\", result_object)\n        return result_object\n    except Exception as e:\n        self._handle_exception(e)\n</code></pre>"}]}